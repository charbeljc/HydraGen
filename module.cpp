#include <core/Basics/Sample.h>
#include <core/Logger.h>
#include <core/Object.h>
#include <core/Basics/Drumkit.h>
#include <core/Basics/Instrument.h>
#include <pybind11_bindings/qtreset.h>
#include <pybind11/pybind11.h>
namespace py = pybind11;

using namespace H2Core;

PYBIND11_MODULE(h2core, m) {

   py::class_<Sample>(m, "Sample")
    .def(py::init<>())
    .def(py::init<const QString &, int, int, float *, float *>())
    .def(py::init<std::shared_ptr<Sample>>())
    .def("class_name", &Sample::class_name)
    .def("write", &Sample::write)
    .def("load", py::overload_cast<const QString &>(&Sample::load))
    .def("load", py::overload_cast<const QString &, const H2Core::Sample::Loops &, const H2Core::Sample::Rubberband &, const H2Core::Sample::VelocityEnvelope &, const H2Core::Sample::PanEnvelope &>(&Sample::load))
    .def("load", py::overload_cast<>(&Sample::load))
    .def("unload", &Sample::unload)
    .def("apply", &Sample::apply)
    .def("apply_loops", &Sample::apply_loops)
    .def("apply_velocity", &Sample::apply_velocity)
    .def("apply_pan", &Sample::apply_pan)
    .def("apply_rubberband", &Sample::apply_rubberband)
    .def("exec_rubberband_cli", &Sample::exec_rubberband_cli)
    .def("is_empty", &Sample::is_empty)
    .def("get_filepath", &Sample::get_filepath)
    .def("get_filename", &Sample::get_filename)
    .def("set_filepath", &Sample::set_filepath)
    .def("set_filename", &Sample::set_filename)
    .def("set_frames", &Sample::set_frames)
    .def("get_frames", &Sample::get_frames)
    .def("set_sample_rate", &Sample::set_sample_rate)
    .def("get_sample_rate", &Sample::get_sample_rate)
    .def("get_sample_duration", &Sample::get_sample_duration)
    .def("get_size", &Sample::get_size)
    .def("get_data_l", &Sample::get_data_l)
    .def("get_data_r", &Sample::get_data_r)
    .def("set_is_modified", &Sample::set_is_modified)
    .def("get_is_modified", &Sample::get_is_modified)
    .def("get_pan_envelope", &Sample::get_pan_envelope)
    .def("get_velocity_envelope", &Sample::get_velocity_envelope)
    .def("get_loops", &Sample::get_loops)
    .def("get_rubberband", &Sample::get_rubberband)
    .def("parse_loop_mode", &Sample::parse_loop_mode)
    .def("get_loop_mode_string", &Sample::get_loop_mode_string)
    .def("toQString", &Sample::toQString);

   py::class_<Rubberband>(m, "Rubberband")
    .def(py::init<>())
    .def(py::init<const H2Core::Sample::Rubberband *>())
    .def("operator==", &Rubberband::operator==)
    .def("toQString", &Rubberband::toQString);

   py::class_<Loops>(m, "Loops")
    .def(py::init<>())
    .def(py::init<const H2Core::Sample::Loops *>())
    .def("operator==", &Loops::operator==)
    .def("toQString", &Loops::toQString);

   py::class_<QString>(m, "QString")
    .def(py::init<>())
    .def(py::init<const QChar *, int>())
    .def(py::init<QChar>())
    .def(py::init<int, QChar>())
    .def(py::init<QLatin1String>())
    .def(py::init<const QString &>())
    .def(py::init<QString &&>())
    .def(py::init<const char *>())
    .def(py::init<const QByteArray &>())
    .def(py::init<const QString::Null &>())
    .def(py::init<int, Qt::Initialization>())
    .def(py::init<QStringDataPtr>())
    .def("operator=", py::overload_cast<QChar>(&QString::operator=))
    .def("operator=", py::overload_cast<const QString &>(&QString::operator=))
    .def("operator=", py::overload_cast<QLatin1String>(&QString::operator=))
    .def("operator=", py::overload_cast<QString &&>(&QString::operator=))
    .def("operator=", py::overload_cast<const char *>(&QString::operator=))
    .def("operator=", py::overload_cast<const QByteArray &>(&QString::operator=))
    .def("operator=", py::overload_cast<char>(&QString::operator=))
    .def("operator=", py::overload_cast<const QString::Null &>(&QString::operator=))
    .def("swap", &QString::swap)
    .def("size", &QString::size)
    .def("count", py::overload_cast<>(&QString::count))
    .def("count", py::overload_cast<QChar, Qt::CaseSensitivity>(&QString::count))
    .def("count", py::overload_cast<const QString &, Qt::CaseSensitivity>(&QString::count))
    .def("count", py::overload_cast<const QStringRef &, Qt::CaseSensitivity>(&QString::count))
    .def("count", py::overload_cast<const QRegExp &>(&QString::count))
    .def("count", py::overload_cast<const QRegularExpression &>(&QString::count))
    .def("length", &QString::length)
    .def("isEmpty", &QString::isEmpty)
    .def("resize", py::overload_cast<int>(&QString::resize))
    .def("resize", py::overload_cast<int, QChar>(&QString::resize))
    .def("fill", &QString::fill)
    .def("truncate", &QString::truncate)
    .def("chop", &QString::chop)
    .def("capacity", &QString::capacity)
    .def("reserve", &QString::reserve)
    .def("squeeze", &QString::squeeze)
    .def("unicode", &QString::unicode)
    .def("data", py::overload_cast<>(&QString::data))
    .def("data", py::overload_cast<>(&QString::data))
    .def("constData", &QString::constData)
    .def("detach", &QString::detach)
    .def("isDetached", &QString::isDetached)
    .def("isSharedWith", &QString::isSharedWith)
    .def("clear", &QString::clear)
    .def("at", &QString::at)
    .def("operator[]", py::overload_cast<int>(&QString::operator[]))
    .def("operator[]", py::overload_cast<int>(&QString::operator[]))
    .def("operator[]", py::overload_cast<uint>(&QString::operator[]))
    .def("operator[]", py::overload_cast<uint>(&QString::operator[]))
    .def("front", py::overload_cast<>(&QString::front))
    .def("front", py::overload_cast<>(&QString::front))
    .def("back", py::overload_cast<>(&QString::back))
    .def("back", py::overload_cast<>(&QString::back))
    .def("arg", py::overload_cast<qlonglong, int, int, QChar>(&QString::arg))
    .def("arg", py::overload_cast<qulonglong, int, int, QChar>(&QString::arg))
    .def("arg", py::overload_cast<long, int, int, QChar>(&QString::arg))
    .def("arg", py::overload_cast<ulong, int, int, QChar>(&QString::arg))
    .def("arg", py::overload_cast<int, int, int, QChar>(&QString::arg))
    .def("arg", py::overload_cast<uint, int, int, QChar>(&QString::arg))
    .def("arg", py::overload_cast<short, int, int, QChar>(&QString::arg))
    .def("arg", py::overload_cast<ushort, int, int, QChar>(&QString::arg))
    .def("arg", py::overload_cast<double, int, char, int, QChar>(&QString::arg))
    .def("arg", py::overload_cast<char, int, QChar>(&QString::arg))
    .def("arg", py::overload_cast<QChar, int, QChar>(&QString::arg))
    .def("arg", py::overload_cast<const QString &, int, QChar>(&QString::arg))
    .def("arg", py::overload_cast<QStringView, int, QChar>(&QString::arg))
    .def("arg", py::overload_cast<QLatin1String, int, QChar>(&QString::arg))
    .def("arg", py::overload_cast<const QString &, const QString &>(&QString::arg))
    .def("arg", py::overload_cast<const QString &, const QString &, const QString &>(&QString::arg))
    .def("arg", py::overload_cast<const QString &, const QString &, const QString &, const QString &>(&QString::arg))
    .def("arg", py::overload_cast<const QString &, const QString &, const QString &, const QString &, const QString &>(&QString::arg))
    .def("arg", py::overload_cast<const QString &, const QString &, const QString &, const QString &, const QString &, const QString &>(&QString::arg))
    .def("arg", py::overload_cast<const QString &, const QString &, const QString &, const QString &, const QString &, const QString &, const QString &>(&QString::arg))
    .def("arg", py::overload_cast<const QString &, const QString &, const QString &, const QString &, const QString &, const QString &, const QString &, const QString &>(&QString::arg))
    .def("arg", py::overload_cast<const QString &, const QString &, const QString &, const QString &, const QString &, const QString &, const QString &, const QString &, const QString &>(&QString::arg))
    .def("vsprintf", &QString::vsprintf)
    .def("sprintf", &QString::sprintf)
    .def("vasprintf", &QString::vasprintf)
    .def("asprintf", &QString::asprintf)
    .def("indexOf", py::overload_cast<QChar, int, Qt::CaseSensitivity>(&QString::indexOf))
    .def("indexOf", py::overload_cast<QLatin1String, int, Qt::CaseSensitivity>(&QString::indexOf))
    .def("indexOf", py::overload_cast<const QString &, int, Qt::CaseSensitivity>(&QString::indexOf))
    .def("indexOf", py::overload_cast<const QStringRef &, int, Qt::CaseSensitivity>(&QString::indexOf))
    .def("indexOf", py::overload_cast<QStringView, int, Qt::CaseSensitivity>(&QString::indexOf))
    .def("indexOf", py::overload_cast<const QRegExp &, int>(&QString::indexOf))
    .def("indexOf", py::overload_cast<QRegExp &, int>(&QString::indexOf))
    .def("indexOf", py::overload_cast<const QRegularExpression &, int>(&QString::indexOf))
    .def("indexOf", py::overload_cast<const QRegularExpression &, int, QRegularExpressionMatch *>(&QString::indexOf))
    .def("lastIndexOf", py::overload_cast<QChar, int, Qt::CaseSensitivity>(&QString::lastIndexOf))
    .def("lastIndexOf", py::overload_cast<QLatin1String, int, Qt::CaseSensitivity>(&QString::lastIndexOf))
    .def("lastIndexOf", py::overload_cast<const QString &, int, Qt::CaseSensitivity>(&QString::lastIndexOf))
    .def("lastIndexOf", py::overload_cast<const QStringRef &, int, Qt::CaseSensitivity>(&QString::lastIndexOf))
    .def("lastIndexOf", py::overload_cast<QStringView, int, Qt::CaseSensitivity>(&QString::lastIndexOf))
    .def("lastIndexOf", py::overload_cast<const QRegExp &, int>(&QString::lastIndexOf))
    .def("lastIndexOf", py::overload_cast<QRegExp &, int>(&QString::lastIndexOf))
    .def("lastIndexOf", py::overload_cast<const QRegularExpression &, int>(&QString::lastIndexOf))
    .def("lastIndexOf", py::overload_cast<const QRegularExpression &, int, QRegularExpressionMatch *>(&QString::lastIndexOf))
    .def("contains", py::overload_cast<QChar, Qt::CaseSensitivity>(&QString::contains))
    .def("contains", py::overload_cast<const QString &, Qt::CaseSensitivity>(&QString::contains))
    .def("contains", py::overload_cast<const QStringRef &, Qt::CaseSensitivity>(&QString::contains))
    .def("contains", py::overload_cast<QLatin1String, Qt::CaseSensitivity>(&QString::contains))
    .def("contains", py::overload_cast<QStringView, Qt::CaseSensitivity>(&QString::contains))
    .def("contains", py::overload_cast<const QRegExp &>(&QString::contains))
    .def("contains", py::overload_cast<QRegExp &>(&QString::contains))
    .def("contains", py::overload_cast<const QRegularExpression &>(&QString::contains))
    .def("contains", py::overload_cast<const QRegularExpression &, QRegularExpressionMatch *>(&QString::contains))
    .def("section", py::overload_cast<QChar, int, int, QString::SectionFlags>(&QString::section))
    .def("section", py::overload_cast<const QString &, int, int, QString::SectionFlags>(&QString::section))
    .def("section", py::overload_cast<const QRegExp &, int, int, QString::SectionFlags>(&QString::section))
    .def("section", py::overload_cast<const QRegularExpression &, int, int, QString::SectionFlags>(&QString::section))
    .def("left", &QString::left)
    .def("right", &QString::right)
    .def("mid", &QString::mid)
    .def("chopped", &QString::chopped)
    .def("leftRef", &QString::leftRef)
    .def("rightRef", &QString::rightRef)
    .def("midRef", &QString::midRef)
    .def("startsWith", py::overload_cast<const QString &, Qt::CaseSensitivity>(&QString::startsWith))
    .def("startsWith", py::overload_cast<const QStringRef &, Qt::CaseSensitivity>(&QString::startsWith))
    .def("startsWith", py::overload_cast<QStringView, Qt::CaseSensitivity>(&QString::startsWith))
    .def("startsWith", py::overload_cast<QLatin1String, Qt::CaseSensitivity>(&QString::startsWith))
    .def("startsWith", py::overload_cast<QChar, Qt::CaseSensitivity>(&QString::startsWith))
    .def("endsWith", py::overload_cast<const QString &, Qt::CaseSensitivity>(&QString::endsWith))
    .def("endsWith", py::overload_cast<const QStringRef &, Qt::CaseSensitivity>(&QString::endsWith))
    .def("endsWith", py::overload_cast<QStringView, Qt::CaseSensitivity>(&QString::endsWith))
    .def("endsWith", py::overload_cast<QLatin1String, Qt::CaseSensitivity>(&QString::endsWith))
    .def("endsWith", py::overload_cast<QChar, Qt::CaseSensitivity>(&QString::endsWith))
    .def("isUpper", &QString::isUpper)
    .def("isLower", &QString::isLower)
    .def("leftJustified", &QString::leftJustified)
    .def("rightJustified", &QString::rightJustified)
    .def("toLower", py::overload_cast<>(&QString::toLower))
    .def("toLower", py::overload_cast<>(&QString::toLower))
    .def("toUpper", py::overload_cast<>(&QString::toUpper))
    .def("toUpper", py::overload_cast<>(&QString::toUpper))
    .def("toCaseFolded", py::overload_cast<>(&QString::toCaseFolded))
    .def("toCaseFolded", py::overload_cast<>(&QString::toCaseFolded))
    .def("trimmed", py::overload_cast<>(&QString::trimmed))
    .def("trimmed", py::overload_cast<>(&QString::trimmed))
    .def("simplified", py::overload_cast<>(&QString::simplified))
    .def("simplified", py::overload_cast<>(&QString::simplified))
    .def("toHtmlEscaped", &QString::toHtmlEscaped)
    .def("insert", py::overload_cast<int, QChar>(&QString::insert))
    .def("insert", py::overload_cast<int, const QChar *, int>(&QString::insert))
    .def("insert", py::overload_cast<int, const QString &>(&QString::insert))
    .def("insert", py::overload_cast<int, const QStringRef &>(&QString::insert))
    .def("insert", py::overload_cast<int, QStringView>(&QString::insert))
    .def("insert", py::overload_cast<int, QLatin1String>(&QString::insert))
    .def("insert", py::overload_cast<int, const char *>(&QString::insert))
    .def("insert", py::overload_cast<int, const QByteArray &>(&QString::insert))
    .def("append", py::overload_cast<QChar>(&QString::append))
    .def("append", py::overload_cast<const QChar *, int>(&QString::append))
    .def("append", py::overload_cast<const QString &>(&QString::append))
    .def("append", py::overload_cast<const QStringRef &>(&QString::append))
    .def("append", py::overload_cast<QLatin1String>(&QString::append))
    .def("append", py::overload_cast<QStringView>(&QString::append))
    .def("append", py::overload_cast<const char *>(&QString::append))
    .def("append", py::overload_cast<const QByteArray &>(&QString::append))
    .def("prepend", py::overload_cast<QChar>(&QString::prepend))
    .def("prepend", py::overload_cast<const QChar *, int>(&QString::prepend))
    .def("prepend", py::overload_cast<const QString &>(&QString::prepend))
    .def("prepend", py::overload_cast<const QStringRef &>(&QString::prepend))
    .def("prepend", py::overload_cast<QLatin1String>(&QString::prepend))
    .def("prepend", py::overload_cast<QStringView>(&QString::prepend))
    .def("prepend", py::overload_cast<const char *>(&QString::prepend))
    .def("prepend", py::overload_cast<const QByteArray &>(&QString::prepend))
    .def("operator+=", py::overload_cast<QChar>(&QString::operator+=))
    .def("operator+=", py::overload_cast<QChar::SpecialCharacter>(&QString::operator+=))
    .def("operator+=", py::overload_cast<const QString &>(&QString::operator+=))
    .def("operator+=", py::overload_cast<const QStringRef &>(&QString::operator+=))
    .def("operator+=", py::overload_cast<QLatin1String>(&QString::operator+=))
    .def("operator+=", py::overload_cast<QStringView>(&QString::operator+=))
    .def("operator+=", py::overload_cast<const char *>(&QString::operator+=))
    .def("operator+=", py::overload_cast<const QByteArray &>(&QString::operator+=))
    .def("operator+=", py::overload_cast<char>(&QString::operator+=))
    .def("remove", py::overload_cast<int, int>(&QString::remove))
    .def("remove", py::overload_cast<QChar, Qt::CaseSensitivity>(&QString::remove))
    .def("remove", py::overload_cast<QLatin1String, Qt::CaseSensitivity>(&QString::remove))
    .def("remove", py::overload_cast<const QString &, Qt::CaseSensitivity>(&QString::remove))
    .def("remove", py::overload_cast<const QRegExp &>(&QString::remove))
    .def("remove", py::overload_cast<const QRegularExpression &>(&QString::remove))
    .def("replace", py::overload_cast<int, int, QChar>(&QString::replace))
    .def("replace", py::overload_cast<int, int, const QChar *, int>(&QString::replace))
    .def("replace", py::overload_cast<int, int, const QString &>(&QString::replace))
    .def("replace", py::overload_cast<QChar, QChar, Qt::CaseSensitivity>(&QString::replace))
    .def("replace", py::overload_cast<const QChar *, int, const QChar *, int, Qt::CaseSensitivity>(&QString::replace))
    .def("replace", py::overload_cast<QLatin1String, QLatin1String, Qt::CaseSensitivity>(&QString::replace))
    .def("replace", py::overload_cast<QLatin1String, const QString &, Qt::CaseSensitivity>(&QString::replace))
    .def("replace", py::overload_cast<const QString &, QLatin1String, Qt::CaseSensitivity>(&QString::replace))
    .def("replace", py::overload_cast<const QString &, const QString &, Qt::CaseSensitivity>(&QString::replace))
    .def("replace", py::overload_cast<QChar, const QString &, Qt::CaseSensitivity>(&QString::replace))
    .def("replace", py::overload_cast<QChar, QLatin1String, Qt::CaseSensitivity>(&QString::replace))
    .def("replace", py::overload_cast<const QRegExp &, const QString &>(&QString::replace))
    .def("replace", py::overload_cast<const QRegularExpression &, const QString &>(&QString::replace))
    .def("split", py::overload_cast<const QString &, QString::SplitBehavior, Qt::CaseSensitivity>(&QString::split))
    .def("split", py::overload_cast<QChar, QString::SplitBehavior, Qt::CaseSensitivity>(&QString::split))
    .def("split", py::overload_cast<const QRegExp &, QString::SplitBehavior>(&QString::split))
    .def("split", py::overload_cast<const QRegularExpression &, QString::SplitBehavior>(&QString::split))
    .def("split", py::overload_cast<const QString &, Qt::SplitBehavior, Qt::CaseSensitivity>(&QString::split))
    .def("split", py::overload_cast<QChar, Qt::SplitBehavior, Qt::CaseSensitivity>(&QString::split))
    .def("split", py::overload_cast<const QRegExp &, Qt::SplitBehavior>(&QString::split))
    .def("split", py::overload_cast<const QRegularExpression &, Qt::SplitBehavior>(&QString::split))
    .def("splitRef", py::overload_cast<const QString &, QString::SplitBehavior, Qt::CaseSensitivity>(&QString::splitRef))
    .def("splitRef", py::overload_cast<QChar, QString::SplitBehavior, Qt::CaseSensitivity>(&QString::splitRef))
    .def("splitRef", py::overload_cast<const QRegExp &, QString::SplitBehavior>(&QString::splitRef))
    .def("splitRef", py::overload_cast<const QRegularExpression &, QString::SplitBehavior>(&QString::splitRef))
    .def("splitRef", py::overload_cast<const QString &, Qt::SplitBehavior, Qt::CaseSensitivity>(&QString::splitRef))
    .def("splitRef", py::overload_cast<QChar, Qt::SplitBehavior, Qt::CaseSensitivity>(&QString::splitRef))
    .def("splitRef", py::overload_cast<const QRegExp &, Qt::SplitBehavior>(&QString::splitRef))
    .def("splitRef", py::overload_cast<const QRegularExpression &, Qt::SplitBehavior>(&QString::splitRef))
    .def("normalized", &QString::normalized)
    .def("repeated", &QString::repeated)
    .def("utf16", &QString::utf16)
    .def("toLatin1", py::overload_cast<>(&QString::toLatin1))
    .def("toLatin1", py::overload_cast<>(&QString::toLatin1))
    .def("toUtf8", py::overload_cast<>(&QString::toUtf8))
    .def("toUtf8", py::overload_cast<>(&QString::toUtf8))
    .def("toLocal8Bit", py::overload_cast<>(&QString::toLocal8Bit))
    .def("toLocal8Bit", py::overload_cast<>(&QString::toLocal8Bit))
    .def("toUcs4", &QString::toUcs4)
    .def("fromLatin1", py::overload_cast<const char *, int>(&QString::fromLatin1))
    .def("fromLatin1", py::overload_cast<const QByteArray &>(&QString::fromLatin1))
    .def("fromUtf8", py::overload_cast<const char *, int>(&QString::fromUtf8))
    .def("fromUtf8", py::overload_cast<const QByteArray &>(&QString::fromUtf8))
    .def("fromLocal8Bit", py::overload_cast<const char *, int>(&QString::fromLocal8Bit))
    .def("fromLocal8Bit", py::overload_cast<const QByteArray &>(&QString::fromLocal8Bit))
    .def("fromUtf16", py::overload_cast<const ushort *, int>(&QString::fromUtf16))
    .def("fromUtf16", py::overload_cast<const char16_t *, int>(&QString::fromUtf16))
    .def("fromUcs4", py::overload_cast<const uint *, int>(&QString::fromUcs4))
    .def("fromUcs4", py::overload_cast<const char32_t *, int>(&QString::fromUcs4))
    .def("fromRawData", &QString::fromRawData)
    .def("toWCharArray", &QString::toWCharArray)
    .def("fromWCharArray", &QString::fromWCharArray)
    .def("setRawData", &QString::setRawData)
    .def("setUnicode", &QString::setUnicode)
    .def("setUtf16", &QString::setUtf16)
    .def("compare", py::overload_cast<const QString &, Qt::CaseSensitivity>(&QString::compare))
    .def("compare", py::overload_cast<const QStringRef &, Qt::CaseSensitivity>(&QString::compare))
    .def("compare", py::overload_cast<QLatin1String, Qt::CaseSensitivity>(&QString::compare))
    .def("compare", py::overload_cast<QStringView, Qt::CaseSensitivity>(&QString::compare))
    .def("compare", py::overload_cast<QChar, Qt::CaseSensitivity>(&QString::compare))
    .def("compare", py::overload_cast<const QString &, const QString &, Qt::CaseSensitivity>(&QString::compare))
    .def("compare", py::overload_cast<const QString &, QLatin1String, Qt::CaseSensitivity>(&QString::compare))
    .def("compare", py::overload_cast<QLatin1String, const QString &, Qt::CaseSensitivity>(&QString::compare))
    .def("compare", py::overload_cast<const QString &, const QStringRef &, Qt::CaseSensitivity>(&QString::compare))
    .def("localeAwareCompare", py::overload_cast<const QString &>(&QString::localeAwareCompare))
    .def("localeAwareCompare", py::overload_cast<const QString &, const QString &>(&QString::localeAwareCompare))
    .def("localeAwareCompare", py::overload_cast<const QStringRef &>(&QString::localeAwareCompare))
    .def("localeAwareCompare", py::overload_cast<const QString &, const QStringRef &>(&QString::localeAwareCompare))
    .def("toShort", &QString::toShort)
    .def("toUShort", &QString::toUShort)
    .def("toInt", &QString::toInt)
    .def("toUInt", &QString::toUInt)
    .def("toLong", &QString::toLong)
    .def("toULong", &QString::toULong)
    .def("toLongLong", &QString::toLongLong)
    .def("toULongLong", &QString::toULongLong)
    .def("toFloat", &QString::toFloat)
    .def("toDouble", &QString::toDouble)
    .def("setNum", py::overload_cast<short, int>(&QString::setNum))
    .def("setNum", py::overload_cast<ushort, int>(&QString::setNum))
    .def("setNum", py::overload_cast<int, int>(&QString::setNum))
    .def("setNum", py::overload_cast<uint, int>(&QString::setNum))
    .def("setNum", py::overload_cast<long, int>(&QString::setNum))
    .def("setNum", py::overload_cast<ulong, int>(&QString::setNum))
    .def("setNum", py::overload_cast<qlonglong, int>(&QString::setNum))
    .def("setNum", py::overload_cast<qulonglong, int>(&QString::setNum))
    .def("setNum", py::overload_cast<float, char, int>(&QString::setNum))
    .def("setNum", py::overload_cast<double, char, int>(&QString::setNum))
    .def("number", py::overload_cast<int, int>(&QString::number))
    .def("number", py::overload_cast<uint, int>(&QString::number))
    .def("number", py::overload_cast<long, int>(&QString::number))
    .def("number", py::overload_cast<ulong, int>(&QString::number))
    .def("number", py::overload_cast<qlonglong, int>(&QString::number))
    .def("number", py::overload_cast<qulonglong, int>(&QString::number))
    .def("number", py::overload_cast<double, char, int>(&QString::number))
    .def("operator==", py::overload_cast<QLatin1String>(&QString::operator==))
    .def("operator==", py::overload_cast<const char *>(&QString::operator==))
    .def("operator==", py::overload_cast<const QByteArray &>(&QString::operator==))
    .def("operator<", py::overload_cast<QLatin1String>(&QString::operator<))
    .def("operator<", py::overload_cast<const char *>(&QString::operator<))
    .def("operator<", py::overload_cast<const QByteArray &>(&QString::operator<))
    .def("operator>", py::overload_cast<QLatin1String>(&QString::operator>))
    .def("operator>", py::overload_cast<const char *>(&QString::operator>))
    .def("operator>", py::overload_cast<const QByteArray &>(&QString::operator>))
    .def("operator!=", py::overload_cast<QLatin1String>(&QString::operator!=))
    .def("operator!=", py::overload_cast<const char *>(&QString::operator!=))
    .def("operator!=", py::overload_cast<const QByteArray &>(&QString::operator!=))
    .def("operator<=", py::overload_cast<QLatin1String>(&QString::operator<=))
    .def("operator<=", py::overload_cast<const char *>(&QString::operator<=))
    .def("operator<=", py::overload_cast<const QByteArray &>(&QString::operator<=))
    .def("operator>=", py::overload_cast<QLatin1String>(&QString::operator>=))
    .def("operator>=", py::overload_cast<const char *>(&QString::operator>=))
    .def("operator>=", py::overload_cast<const QByteArray &>(&QString::operator>=))
    .def("begin", py::overload_cast<>(&QString::begin))
    .def("begin", py::overload_cast<>(&QString::begin))
    .def("cbegin", &QString::cbegin)
    .def("constBegin", &QString::constBegin)
    .def("end", py::overload_cast<>(&QString::end))
    .def("end", py::overload_cast<>(&QString::end))
    .def("cend", &QString::cend)
    .def("constEnd", &QString::constEnd)
    .def("rbegin", py::overload_cast<>(&QString::rbegin))
    .def("rbegin", py::overload_cast<>(&QString::rbegin))
    .def("rend", py::overload_cast<>(&QString::rend))
    .def("rend", py::overload_cast<>(&QString::rend))
    .def("crbegin", &QString::crbegin)
    .def("crend", &QString::crend)
    .def("push_back", py::overload_cast<QChar>(&QString::push_back))
    .def("push_back", py::overload_cast<const QString &>(&QString::push_back))
    .def("push_front", py::overload_cast<QChar>(&QString::push_front))
    .def("push_front", py::overload_cast<const QString &>(&QString::push_front))
    .def("shrink_to_fit", &QString::shrink_to_fit)
    .def("fromStdString", &QString::fromStdString)
    .def("toStdString", &QString::toStdString)
    .def("fromStdWString", &QString::fromStdWString)
    .def("toStdWString", &QString::toStdWString)
    .def("fromStdU16String", &QString::fromStdU16String)
    .def("toStdU16String", &QString::toStdU16String)
    .def("fromStdU32String", &QString::fromStdU32String)
    .def("toStdU32String", &QString::toStdU32String)
    .def("isNull", &QString::isNull)
    .def("isSimpleText", &QString::isSimpleText)
    .def("isRightToLeft", &QString::isRightToLeft)
    .def("isValidUtf16", &QString::isValidUtf16)
    .def("data_ptr", &QString::data_ptr);

   py::class_<Object>(m, "Object")
    .def(py::init<>())
    .def(py::init<const H2Core::Object &>())
    .def(py::init<const char *>())
    .def("class_name", &Object::class_name)
    .def("set_count", &Object::set_count)
    .def("count_active", &Object::count_active)
    .def("objects_count", &Object::objects_count)
    .def("write_objects_map_to", &Object::write_objects_map_to)
    .def("write_objects_map_to_cerr", &Object::write_objects_map_to_cerr)
    .def("bootstrap", &Object::bootstrap)
    .def("logger", &Object::logger)
    .def("getAliveObjectCount", &Object::getAliveObjectCount)
    .def("getObjectMap", &Object::getObjectMap)
    .def("printObjectMapDiff", &Object::printObjectMapDiff)
    .def("toQString", &Object::toQString)
    .def("Print", &Object::Print);

   py::class_<InstrumentList>(m, "InstrumentList")
    .def(py::init<>())
    .def(py::init<H2Core::InstrumentList *>())
    .def("class_name", &InstrumentList::class_name)
    .def("size", &InstrumentList::size)
    .def("operator<<", &InstrumentList::operator<<)
    .def("operator[]", &InstrumentList::operator[])
    .def("add", &InstrumentList::add)
    .def("insert", &InstrumentList::insert)
    .def("is_valid_index", &InstrumentList::is_valid_index)
    .def("get", &InstrumentList::get)
    .def("del", py::overload_cast<int>(&InstrumentList::del))
    .def("del", py::overload_cast<std::shared_ptr<Instrument>>(&InstrumentList::del))
    .def("index", &InstrumentList::index)
    .def("find", py::overload_cast<const int>(&InstrumentList::find))
    .def("find", py::overload_cast<const QString &>(&InstrumentList::find))
    .def("findMidiNote", &InstrumentList::findMidiNote)
    .def("swap", &InstrumentList::swap)
    .def("move", &InstrumentList::move)
    .def("load_samples", &InstrumentList::load_samples)
    .def("unload_samples", &InstrumentList::unload_samples)
    .def("save_to", &InstrumentList::save_to)
    .def("load_from", &InstrumentList::load_from)
    .def("fix_issue_307", &InstrumentList::fix_issue_307)
    .def("has_all_midi_notes_same", &InstrumentList::has_all_midi_notes_same)
    .def("set_default_midi_out_notes", &InstrumentList::set_default_midi_out_notes)
    .def("toQString", &InstrumentList::toQString);

   py::class_<Instrument>(m, "Instrument")
    .def(py::init<const int, const QString &, std::shared_ptr<ADSR>>())
    .def(py::init<std::shared_ptr<Instrument>>())
    .def("class_name", &Instrument::class_name)
    .def("load_instrument", &Instrument::load_instrument)
    .def("load_from", py::overload_cast<const QString &, const QString &, bool, Filesystem::Lookup>(&Instrument::load_from))
    .def("load_from", py::overload_cast<H2Core::Drumkit *, std::shared_ptr<Instrument>, bool>(&Instrument::load_from))
    .def("load_from", py::overload_cast<H2Core::XMLNode *, const QString &, const QString &>(&Instrument::load_from))
    .def("load_samples", &Instrument::load_samples)
    .def("unload_samples", &Instrument::unload_samples)
    .def("save_to", &Instrument::save_to)
    .def("set_name", &Instrument::set_name)
    .def("get_name", &Instrument::get_name)
    .def("set_id", &Instrument::set_id)
    .def("get_id", &Instrument::get_id)
    .def("set_adsr", &Instrument::set_adsr)
    .def("get_adsr", &Instrument::get_adsr)
    .def("copy_adsr", &Instrument::copy_adsr)
    .def("set_mute_group", &Instrument::set_mute_group)
    .def("get_mute_group", &Instrument::get_mute_group)
    .def("set_midi_out_channel", &Instrument::set_midi_out_channel)
    .def("get_midi_out_channel", &Instrument::get_midi_out_channel)
    .def("set_midi_out_note", &Instrument::set_midi_out_note)
    .def("get_midi_out_note", &Instrument::get_midi_out_note)
    .def("set_muted", &Instrument::set_muted)
    .def("is_muted", &Instrument::is_muted)
    .def("setPan", &Instrument::setPan)
    .def("setPanWithRangeFrom0To1", &Instrument::setPanWithRangeFrom0To1)
    .def("getPan", &Instrument::getPan)
    .def("getPanWithRangeFrom0To1", &Instrument::getPanWithRangeFrom0To1)
    .def("set_gain", &Instrument::set_gain)
    .def("get_gain", &Instrument::get_gain)
    .def("set_volume", &Instrument::set_volume)
    .def("get_volume", &Instrument::get_volume)
    .def("set_filter_active", &Instrument::set_filter_active)
    .def("is_filter_active", &Instrument::is_filter_active)
    .def("set_filter_resonance", &Instrument::set_filter_resonance)
    .def("get_filter_resonance", &Instrument::get_filter_resonance)
    .def("set_filter_cutoff", &Instrument::set_filter_cutoff)
    .def("get_filter_cutoff", &Instrument::get_filter_cutoff)
    .def("set_peak_l", &Instrument::set_peak_l)
    .def("get_peak_l", &Instrument::get_peak_l)
    .def("set_peak_r", &Instrument::set_peak_r)
    .def("get_peak_r", &Instrument::get_peak_r)
    .def("set_fx_level", &Instrument::set_fx_level)
    .def("get_fx_level", &Instrument::get_fx_level)
    .def("set_random_pitch_factor", &Instrument::set_random_pitch_factor)
    .def("get_random_pitch_factor", &Instrument::get_random_pitch_factor)
    .def("set_pitch_offset", &Instrument::set_pitch_offset)
    .def("get_pitch_offset", &Instrument::get_pitch_offset)
    .def("set_active", &Instrument::set_active)
    .def("is_active", &Instrument::is_active)
    .def("set_soloed", &Instrument::set_soloed)
    .def("is_soloed", &Instrument::is_soloed)
    .def("enqueue", &Instrument::enqueue)
    .def("dequeue", &Instrument::dequeue)
    .def("is_queued", &Instrument::is_queued)
    .def("set_stop_notes", &Instrument::set_stop_notes)
    .def("is_stop_notes", &Instrument::is_stop_notes)
    .def("set_sample_selection_alg", &Instrument::set_sample_selection_alg)
    .def("sample_selection_alg", &Instrument::sample_selection_alg)
    .def("set_hihat_grp", &Instrument::set_hihat_grp)
    .def("get_hihat_grp", &Instrument::get_hihat_grp)
    .def("set_lower_cc", &Instrument::set_lower_cc)
    .def("get_lower_cc", &Instrument::get_lower_cc)
    .def("set_higher_cc", &Instrument::set_higher_cc)
    .def("get_higher_cc", &Instrument::get_higher_cc)
    .def("set_drumkit_name", &Instrument::set_drumkit_name)
    .def("get_drumkit_name", &Instrument::get_drumkit_name)
    .def("set_is_preview_instrument", &Instrument::set_is_preview_instrument)
    .def("is_preview_instrument", &Instrument::is_preview_instrument)
    .def("set_is_metronome_instrument", &Instrument::set_is_metronome_instrument)
    .def("is_metronome_instrument", &Instrument::is_metronome_instrument)
    .def("get_components", &Instrument::get_components)
    .def("get_component", &Instrument::get_component)
    .def("set_apply_velocity", &Instrument::set_apply_velocity)
    .def("get_apply_velocity", &Instrument::get_apply_velocity)
    .def("is_currently_exported", &Instrument::is_currently_exported)
    .def("set_currently_exported", &Instrument::set_currently_exported)
    .def("has_missing_samples", &Instrument::has_missing_samples)
    .def("set_missing_samples", &Instrument::set_missing_samples)
    .def("toQString", &Instrument::toQString);

   py::class_<DrumkitComponent>(m, "DrumkitComponent")
    .def(py::init<const int, const QString &>())
    .def(py::init<H2Core::DrumkitComponent *>())
    .def("class_name", &DrumkitComponent::class_name)
    .def("save_to", &DrumkitComponent::save_to)
    .def("load_from", py::overload_cast<H2Core::XMLNode *, const QString &>(&DrumkitComponent::load_from))
    .def("load_from", py::overload_cast<H2Core::DrumkitComponent *, bool>(&DrumkitComponent::load_from))
    .def("set_name", &DrumkitComponent::set_name)
    .def("get_name", &DrumkitComponent::get_name)
    .def("set_id", &DrumkitComponent::set_id)
    .def("get_id", &DrumkitComponent::get_id)
    .def("set_volume", &DrumkitComponent::set_volume)
    .def("get_volume", &DrumkitComponent::get_volume)
    .def("set_muted", &DrumkitComponent::set_muted)
    .def("is_muted", &DrumkitComponent::is_muted)
    .def("set_soloed", &DrumkitComponent::set_soloed)
    .def("is_soloed", &DrumkitComponent::is_soloed)
    .def("set_peak_l", &DrumkitComponent::set_peak_l)
    .def("get_peak_l", &DrumkitComponent::get_peak_l)
    .def("set_peak_r", &DrumkitComponent::set_peak_r)
    .def("get_peak_r", &DrumkitComponent::get_peak_r)
    .def("reset_outs", &DrumkitComponent::reset_outs)
    .def("set_outs", &DrumkitComponent::set_outs)
    .def("get_out_L", &DrumkitComponent::get_out_L)
    .def("get_out_R", &DrumkitComponent::get_out_R)
    .def("toQString", &DrumkitComponent::toQString);

   py::class_<Drumkit>(m, "Drumkit")
    .def(py::init<>())
    .def(py::init<H2Core::Drumkit *>())
    .def("class_name", &Drumkit::class_name)
    .def("load", &Drumkit::load)
    .def("load_by_name", &Drumkit::load_by_name)
    .def("load_file", &Drumkit::load_file)
    .def("load_samples", &Drumkit::load_samples)
    .def("unload_samples", &Drumkit::unload_samples)
    .def("upgrade_drumkit", &Drumkit::upgrade_drumkit)
    .def("user_drumkit_exists", &Drumkit::user_drumkit_exists)
    .def("save", py::overload_cast<bool>(&Drumkit::save))
    .def("save", py::overload_cast<const QString &, bool>(&Drumkit::save))
    .def("save", py::overload_cast<const QString &, const QString &, const QString &, const QString &, const QString &, const QString &, H2Core::InstrumentList *, std::vector<DrumkitComponent *> *, bool>(&Drumkit::save))
    .def("save_file", &Drumkit::save_file)
    .def("save_samples", &Drumkit::save_samples)
    .def("save_image", &Drumkit::save_image)
    .def("install", &Drumkit::install)
    .def("remove", &Drumkit::remove)
    .def("set_instruments", &Drumkit::set_instruments)
    .def("get_instruments", &Drumkit::get_instruments)
    .def("set_path", &Drumkit::set_path)
    .def("get_path", &Drumkit::get_path)
    .def("set_name", &Drumkit::set_name)
    .def("get_name", &Drumkit::get_name)
    .def("set_author", &Drumkit::set_author)
    .def("get_author", &Drumkit::get_author)
    .def("set_info", &Drumkit::set_info)
    .def("get_info", &Drumkit::get_info)
    .def("set_license", &Drumkit::set_license)
    .def("get_license", &Drumkit::get_license)
    .def("set_image", &Drumkit::set_image)
    .def("get_image", &Drumkit::get_image)
    .def("set_image_license", &Drumkit::set_image_license)
    .def("get_image_license", &Drumkit::get_image_license)
    .def("samples_loaded", &Drumkit::samples_loaded)
    .def("dump", &Drumkit::dump)
    .def("isUserDrumkit", &Drumkit::isUserDrumkit)
    .def("get_components", &Drumkit::get_components)
    .def("set_components", &Drumkit::set_components)
    .def("toQString", &Drumkit::toQString);

}